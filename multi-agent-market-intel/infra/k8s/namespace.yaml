apiVersion: v1
kind: Namespace
metadata:
  name: mai
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: mai
data:
  BIND_ADDR: "0.0.0.0:8080"
  RUST_LOG: "api=info"
  DATABASE_URL: "postgres://postgres:postgres@db:5432/mai"
---
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: mai
type: Opaque
stringData:
  SUPABASE_JWT_SECRET: "replace_me"
  JWT_AUDIENCE: "authenticated"
  JWT_ISSUER: "https://YOUR.supabase.co/auth/v1"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: mai
spec:
  replicas: 2
  selector: { matchLabels: { app: api } }
  template:
    metadata: { labels: { app: api } }
    spec:
      containers:
      - name: api
        image: ghcr.io/YOURORG/mai-api:latest
        ports: [{ containerPort: 8080 }]
        envFrom:
        - configMapRef: { name: api-config }
        - secretRef: { name: api-secrets }
        readinessProbe: { httpGet: { path: /health, port: 8080 }, initialDelaySeconds: 5, periodSeconds: 10 }
        livenessProbe: { httpGet: { path: /health, port: 8080 }, initialDelaySeconds: 10, periodSeconds: 20 }
        resources: { requests: { cpu: "200m", memory: "256Mi" }, limits: { cpu: "1", memory: "1Gi" } }
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: mai
spec:
  selector: { app: api }
  ports: [{ name: http, port: 80, targetPort: 8080 }]
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-hpa
  namespace: mai
spec:
  scaleTargetRef: { apiVersion: apps/v1, kind: Deployment, name: api }
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target: { type: Utilization, averageUtilization: 70 }
